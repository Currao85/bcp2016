FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# BCP

Polls is a simple API allowing consumers to view polls and vote in them.



#######################
# Group Tree Structure - DRAFT
#######################

API related to the tree management.

## Tree Node collection [/organizations/{structureTypeId}/revisions/{revisionId}/nodes]

### List nodes [GET /organizations/{structureTypeId}/revisions/{revisionId}/nodes{?page,pageSize,sort,sortOrder}]
Returns the revision organization structure tree with assigned people.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    + page: 1 (optional, number) - The page of results to return
    + pageSize: 25 (optional, number) - Amount of results to return
    + sort: description (optional) - Sorting order
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc

+ Response 200 (application/json)
    + Attributes (object)
        + results (array[Node1, Node2, Node3, Node4, Node5, Node6, Node7, Node8, Node9], required) - array of nodes
        + Include PaginationDataTree9

## Tree Node [/organizations/{structureTypeId}/revisions/{revisionId}/nodes/{nodeId}]

### Node info [GET /organizations/{structureTypeId}/revisions/{revisionId}/node/{nodeId}{?page,pageSize,sort,sortOrder}]
Returns the info for the node of the given type id.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    + nodeId: 1 (required) - id of the node
    + page: 1 (optional, number) - The page of results to return
    + pageSize: 25 (optional, number) - Amount of results to return
    + sort: description (optional) - Sorting order
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

+ Request
When the `nodeType` of the node requested is `SIT`.

    + Body
    
+ Response 200 (application/json)
    + Attributes (Node6Detail)
    
+ Request
When the `nodeType` of the node requested is `CHA`, `MEM`, `DEL`, `CRM`, `BCM`, `SM`, `UM`, `CM`, `TL`, `TM`.

    + Body
    
+ Response 200 (application/json)
    + Attributes (Node9Detail)
    
+ Request
When the `nodeType` of the node requested is `COM`, `CRI`, `ET`.

    + Body
    
+ Response 200 (application/json)
    + Attributes (Node2Detail)

### Create Tree Node COM [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes/COM]
Create a new COM node into the tree.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    
+ Request (application/json)
    + Attributes
        + nodeId (number, optional)
        + code: `CMT00002` (string, required)
        + description: `BC COMMITTEE 2` (required)
        + parentNodeId (number, optional)

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/10

    + Attributes (Node2b)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Tree Node ORG [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes/ORG]
Create a new ORG node into the tree.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    
+ Request (application/json)
    + Attributes
        + nodeId (number, optional)
        + code: `BCORG002` (string, required)
        + description: `BC ORGANIZATION 2` (required)
        + parentNodeId (number, optional)

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/11

    + Attributes (Node3b)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Tree Node CRI [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes/CRI]
Create a new CRI node into the tree.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    
+ Request (application/json)
    + Attributes
        + nodeId (number, optional)
        + code: `C09.1.02` (string, required)
        + description: `INCIDENT MANAGEMENT 2` (required)
        + note: `notes` (required)
        + parentNodeId (number, optional)

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/12

    + Attributes (Node4b)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Create Tree Node SIT [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes/SIT]
Create a new SIT node into the tree.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    
+ Request (application/json)
    + Attributes
        + nodeId (number, optional)
        + code: `ST000006` (string, required)
        + description: `VERONA 2` (required)
        + address: `via verona 33` (required)
        + country: `VERONA` (required)
        + telephone: `0000 111111` (required)
        + parentNodeId (number, optional)

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/13

    + Attributes (Node6b)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Tree Node ET [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes/ET]
Create a new ET node into the tree.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    
+ Request (application/json)
    + Attributes
        + nodeId (number, optional)
        + code: `ET000068` (string, required)
        + description: `EMERGENCY TEAM 68 - INCIDENT MANAGEMENT 2` (required)
        + parentNodeId (number, optional)

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/14

    + Attributes (Node8b)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Create Tree Node Profile [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes/{nodeType}]
Create a new Profile node into the tree.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    + nodeType: CHA (required) - the node type (CHA, MEM, DEL, CRM, BCM, SM, UM, CM, TL, TM)
    
+ Request (application/json)
    + Attributes
        + nodeId (number, optional)
        + profileId: 1 (number, required)
        + parentNodeId (number, optional)

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/14

    + Attributes (Node8b)

+ Response 400
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body
    
### Delete Tree Node [DELETE /organizations/{structureTypeId}/revisions/{revisionId}/nodes/{nodeId}{?recursively,entity,entityRecursively}]
Deletes a node in the tree and, eventually, all the children nodes.

+ Parameters
    + recursively: true (string) - delete children or not
    + entity: true (string) - delete node info too or not
    + entityRecursively: true (string) - delete children node info too or not

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body



#######################
# Data Structures
#######################

## PaginationDataTree3 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 3 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## PaginationDataTree9 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 9 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## Node1 (object)
+ id: 1 (required, number)
+ parentId: 1 (number)
+ nodeTypeId: `BCP` (required, string)
+ code: `BCP` (required, string)
+ description: `BCP` (required, string)

## Node2 (object)
+ id: 2 (required, number)
+ parentId: 1 (number)
+ nodeTypeId: `COM` (required, string)
+ code: `CMT00001` (required, string)
+ description: `BC COMMITTEE` (required, string)

## Node2b (object)
+ id: 10 (required, number)
+ parentId (number)
+ nodeTypeId: `COM` (required, string)
+ code: `CMT00002` (required, string)
+ description: `BC COMMITTEE 2` (required, string)

## Node2Detail (Node2)
+ contentDetail (object)
    + results (array[RoleProfile1, RoleProfile2, RoleProfile3], required) - array of profiles
    + Include PaginationDataTree3

## Node3 (object)
+ id: 3 (required, number)
+ parentId: 1 (number)
+ nodeTypeId: `ORG` (required, string)
+ code: `BCORG001` (required, string)
+ description: `BC ORGANIZATION` (required, string)

## Node3b (object)
+ id: 11 (required, number)
+ parentId (number)
+ nodeTypeId: `ORG` (required, string)
+ code: `BCORG002` (required, string)
+ description: `BC ORGANIZATION 2` (required, string)

## Node4 (object)
+ id: 4 (required, number)
+ parentId: 3 (required, number)
+ nodeTypeId: `CRI` (required, string)
+ code: `C09.1.01` (required, string)
+ description: `INCIDENT MANAGEMENT` (required, string)

## Node4b (object)
+ id: 12 (required, number)
+ parentId (required, number)
+ nodeTypeId: `CRI` (required, string)
+ code: `C09.1.02` (required, string)
+ description: `INCIDENT MANAGEMENT 2` (required, string)

## Node5 (object)
+ id: 5 (required, number)
+ parentId: 3 (required, number)
+ nodeTypeId: `CRI` (required, string)
+ code: `C16.1` (required, string)
+ description: `MONITORING & CONTROL` (required, string)

## Node6 (object)
+ id: 6 (required, number)
+ parentId: 4 (required, number)
+ nodeTypeId: `SIT` (required, string)
+ code: `ST000003` (required, string)
+ description: `VERONA` (required, string)

## Node6b (object)
+ id: 13 (required, number)
+ parentId (required, number)
+ nodeTypeId: `SIT` (required, string)
+ code: `ST000006` (required, string)
+ description: `VERONA 2` (required, string)

## Node6Detail (Node6)
+ contentDetail (Site1)

## Node7 (object)
+ id: 7 (required, number)
+ parentId: 4 (required, number)
+ nodeTypeId: `SIT` (required, string)
+ code: `ST000005` (required, string)
+ description: `MUNCHEN, AM TUCHERPARK 12` (required, string)

## Node8 (object)
+ id: 8 (required, number)
+ parentId: 6 (required, number)
+ nodeTypeId: `ET` (required, string)
+ code: `ET000067` (required, string)
+ description: `EMERGENCY TEAM 67 - INCIDENT MANAGEMENT` (required, string)

## Node8b (object)
+ id: 14 (required, number)
+ parentId (required, number)
+ nodeTypeId: `ET` (required, string)
+ code: `ET000068` (required, string)
+ description: `EMERGENCY TEAM 68 - INCIDENT MANAGEMENT 2` (required, string)

## Node9 (object)
+ id: 9 (required, number)
+ parentId: 2 (number)
+ nodeTypeId: `CHA` (required, string)
+ code: `CHA` (required, string)
+ description: `LINZI GIOVANNI` (required, string)

## Node9Detail (Node9)
+ contentDetail (ProfileDetail)

## Profile1 (ProfileDetail)
+ id: 1 (number) - id of the profile
+ nodeTypeDescription: `CHA`

## RoleProfile1 (ProfileListResult)
+ id: 1 (number) - id of the profile
+ nodeTypeDescription: `CHA`

## RoleProfile2 (ProfileListResult)
+ id: 2 (number) - id of the profile
+ nodeTypeDescription: `MEM`

## RoleProfile3 (ProfileListResult)
+ id: 3 (number) - id of the profile
+ nodeTypeDescription: `DEL`

## RoleProfile4 (ProfileListResult)
+ id: 4 (number) - id of the profile
+ nodeTypeDescription: `SM`

## RoleProfile5 (ProfileListResult)
+ id: 5 (number) - id of the profile
+ nodeTypeDescription: `UM`

## RoleProfile6 (ProfileListResult)
+ id: 6 (number) - id of the profile
+ nodeTypeDescription: `CM`

## RoleProfile7 (ProfileListResult)
+ id: 7 (number) - id of the profile
+ nodeTypeDescription: `TL`

## RoleProfile8 (ProfileListResult)
+ id: 8 (number) - id of the profile
+ nodeTypeDescription: `TM`

## RoleProfile9 (ProfileListResult)
+ id: 9 (number) - id of the profile
+ nodeTypeDescription: `TM`

## ProfileBase (object)
+ firstName: `MARIO` (required, string) - First name of the profile. Must be between 2 and 50 chars long.
+ lastName: `BIANCHI` (required, string) - Last name of the profile. Must be between 2 and 50 chars long.
+ email: `mbianchi@acme.it` (required, string) - Email of the profile. Must be a valid email, as specified in RFC2822.
+ profession: `Senior Developer` (string)
+ altInternetAddress: `firstname.lastname@organization2.com` (string) - Must be a valid email, as specified in RFC2822.
+ notesAddress: `indirizzo_notes@aaaaa.it` (string) - Must be a valid email, as specified in RFC2822.
+ userId: `userid` (string) - Username of the profile. If present this field must match with the field used to authenticate on the application server.
+ personalCode: `X123456` (required, string)
+ phone (object)
    + country: `39` (string)
    + number: `12345678` (string)
+ mobilePhone (object)
    + country: `39` (string)
    + number: `1234567` (string)
+ fax (object)
    + country: `39` (string)
    + number: `3904912345678` (string)

## ProfileListResult (ProfileBase)
+ id: 1 (number)
+ Include ProfilesAddresses

## ProfileDetail (ProfileBase)
+ businessUnit: `not used?` (string)
+ jobResponsability: `job responsability` (string)
+ employeeType: `MAI` (required, string) - Code of profile type
+ bluePageCode: `L123456` (required, string)
+ hiringDate: `2016-02-28` (required, string) - Hiring date of the profile. The profile can be found through queries only starting from the specified date.
+ managerRole: `true` (boolean)
+ id: 1 (number)
+ Include ProfilesAddresses

## ProfilesAddresses (object)
+ addresses
    + preferred (ProfileAddress) - preferred address of the user, if different from business address.
    + business (ProfileAddress) - business address of the user.

## ProfileAddress
+ street: Via Nizza 15
+ city: Torino
+ country: Italy
+ zip: 12345
+ locationId: 1 (number)

## Site1 (object)
+ id: 1 (required, number)
+ street: Via Lisbona (string)
+ zip: 12345 (string)
+ city: Padova (string)
+ state: PD (string)
+ country: Italy (string)