FORMAT: 1A
HOST: http://emp.vts.it/vts-bcp-rest-api

# BCP

Polls is a simple API allowing consumers to view polls and vote in them.



#######################
# Group Tree Structure - DRAFT
#######################

API related to the tree management.

## Tree Node collection [/organizations/{structureTypeId}/revisions/{revisionId}/nodes]

### List nodes [GET /organizations/{structureTypeId}/revisions/{revisionId}/nodes{?page,pageSize,sort,sortOrder,searchQuery}]
Returns the revision organization structure tree with assigned people.

**TODO: WIP - the implementation does not yet receive the searchQuery param.**
Takes a `searchQuery` parameter object defined as follows
  + revision (required, number) - numeric id of the revision
  + category (optional, boolean)
  + linkablechildcode (optional, string)
  + linkableparents (optional, boolean)
  + movable (optional, boolean)
  + erasable (optional, boolean)
  + parentdeptcode (optional, string)
  + deptcode (optional, string)department code
  + typeRole (optional, string)
  + deptstrict (optional, boolean)
  + parentdeptlist (optional, boolean)

This action does not require authentication.

+ Parameters
    + structureTypeId: BC (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    + page: 1 (optional, number) - The page of results to return
    + pageSize: 25 (optional, number) - Amount of results to return
    + sort: description (optional) - Sorting order
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc
    + searchQuery: `{"revision":"1", "category":"DPT", "linkablechildcode":"Stewart", "linkableparents":false, "typerole": "ET_LEADER", "deptcode": "xxxx", "partentdeptcode": "yyyy", "movable": false, "erasable": false}` (optional)

+ Response 200 (application/json)
    + Attributes (object)
        + results (array[Node1, Node2, Node3, Node4, Node5, Node6, Node7, Node8, Node9], required) - array of nodes
        + Include PaginationDataTree9

### Link Tree Node [POST /organizations/{structureTypeId}/revisions/{revisionId}/nodes]
Links a previously created node to the tree.

+ Parameters
    + structureTypeId: BC (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"

+ Request (application/json)
    + Attributes
        + code: `CMT00002` (string, required) - entity which is being linked
        + description: `BC COMMITTEE 2` (required)
        + parentId (number, optional)
        + nodeType (object) - type of the linked content node. Only the id parameter is considered.
        + revision (object) - revision to which this node belongs to. Only the id parameter is considered.
        + pathInfo - ignored parameter

+ Response 201 (application/json)

    + Headers

            Location: /organizations/{structureTypeId}/revisions/{revisionId}/nodes/10

    + Attributes (Node2b)

+ Response 400
    Returned when the resource does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body


### List Movable Nodes [GET  /organizations/{structureTypeId}/revisions/{revisionId}/nodes/movable]
Retrieve a list of nodes that are classified as `movable` (i.e. nodes of category `DPT` and with flag `movable == true`).

+ Parameters
    + structureTypeId: BC (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"

+ Response 200 (application/json)
    + Attributes (object)
        + results (array[Node1, Node2, Node3, Node4, Node5, Node6, Node7, Node8, Node9], required) - array of nodes
        + Include PaginationDataTree9

+ Response 500
    Returned when a generic error occours.

    + Body


### List Erasable Nodes [GET  /organizations/{structureTypeId}/revisions/{revisionId}/nodes/movable]
Retrieve a list of nodes that are classified as `erasable` (i.e. nodes of category `DPT` and with flag `erasable == true`).

+ Parameters
    + structureTypeId: BC (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"

+ Response 200 (application/json)
    + Attributes (object)
        + results (array[Node1, Node2, Node3, Node4, Node5, Node6, Node7, Node8, Node9], required) - array of nodes
        + Include PaginationDataTree9

+ Response 500
    Returned when a generic error occours.

    + Body

## Tree Node [/organizations/{structureTypeId}/revisions/{revisionId}/nodes/{nodeId}]

### Node info [GET /organizations/{structureTypeId}/revisions/{revisionId}/nodes/{nodeId}{?page,pageSize,sort,sortOrder}]
Returns the info for the node of the given type id.

+ Parameters
    + structureTypeId: BCP (string) - Structure type to filter for
    + revisionId: 1 (number) - id of the requested revision or "active"
    + nodeId: 1 (number) - id of the node
    + page: 1 (optional, number) - The page of results to return
    + pageSize: 25 (optional, number) - Amount of results to return
    + sort: description (optional) - Sorting order
    + sortOrder: asc (enum, optional) - Sorting order
        + Members
            + asc
            + desc

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

+ Request
When the `nodeType.id` of the node requested is `BC_SITE`.

    + Body

+ Response 200 (application/json)
    + Attributes (Node6Detail)

+ Request
When the `nodeType.id` of the node requested is `BC_CHAIRMA`, `BC_MEMBER`, `BC_CRIMAN`, `BC_MANAGER`, `BC_SERVMAN`, `BC_UNITMAN`, `BC_ETLEAD`, `BC_ETMEMB`, `BC_ETDEPUT`, `BC_COEMAN`, `BC_PROCOWN`, `BC_PROCFOC`, `BC_PROCDEP`, `BC_SITEMAN`, `BC_COMMAN`.

    + Body

+ Response 200 (application/json)
    + Attributes (Node10Detail)

+ Request
When the `nodeType.id` of the node requested is `BC_COMM`, `BC_ET`.

    + Body

+ Response 200 (application/json)
    + Attributes (Node2Detail)

+ Request
When the `nodeType.id` of the node requested is `BC_ORG`.

    + Body

+ Response 200 (application/json)
    + Attributes (Node11Detail)

+ Request
When the `nodeType.id` of the node requested is `BC_CRIPROC`.

    + Body

+ Response 200 (application/json)
    + Attributes (Node12Detail)

### List Linkable Nodes [GET  /organizations/{structureTypeId}/revisions/{revisionId}/nodes/{nodeId}/linkableparentsnodes]
Retrieve a list of nodes that the current node can be linked to.

+ Parameters
    + structureTypeId: BC (string) - Structure type to filter for
    + revisionId: 1 (required) - id of the requested revision or "active"
    + nodeId: 1 (number) - id of the node

+ Response 200 (application/json)
    + Attributes (object)
        + results (array[Node1, Node2, Node3, Node4, Node5, Node6, Node7, Node8, Node9], required) - array of nodes
        + Include PaginationDataTree9

+ Response 500
    Returned when a generic error occours.

    + Body

### Move Tree Node [PUT]
Move the node (and all its children) in the tree.

+ Parameters
    + nodeId: 1 (number) - id of the node
    + structureTypeId: BC - Structure type to filter for
    + revisionId: 1 (number) - id of the requested revision or "active"

+ Request (application/json)
    + Attributes
        + code: `CMT00002` (string, required) - ignored parameter
        + description: `BC COMMITTEE 2` (required) - ignored parameter
        + parentId (number, required) - new parent of the node
        + nodeType (object) - ignored parameter
        + revision (object) - ignored parameter
        + pathInfo - ignored parameter

+ Response 200 (application/json)

    + Attributes (Node2b)

+ Response 400
    Returned when the resource does not pass validation.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

### Delete Tree Node [DELETE]
Deletes a node in the tree and all the children nodes.
Does not delete the linked entities or the people.

+ Parameters
    + nodeId: 1 (number) - id of the node
    + structureTypeId: BC - Structure type to filter for
    + revisionId: 1 (number) - id of the requested revision or "active"

+ Response 204

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body

#######################
# Group Documents
#######################

API related to documents management.

## Documents collection [/departments/{departmentCode}/documents{?page,pageSize}]

### List documents [GET]
Returns the document list for the given department.

+ Parameters
    + departmentCode: `ST000006` (string, required) - id of the entity
    + page: 1 (optional, number) - The page of results to return
    + pageSize: 25 (optional, number) - Amount of results to return

<!--
+ sort: description (optional) - Sorting order
+ sortOrder: asc (enum, optional) - Sorting order
    + Members
        + asc
        + desc
-->

+ Response 200 (application/json)
    + Attributes (object)
        + results (array[Document1, Document2, Document3]) - array of document objects
        + Include PaginationDataTree9

### Upload document [POST]
Uploads a new document for the given department.

The uploaded document will be inserted as new document even if exists a document with same name.

+ Parameters
    + departmentCode: `ST000006` (string, required) - Id of the entity

+ Request (multipart/form-data)

+ Response 201 (application/json)
    + Headers
            Location: http://domain/departments/{departmentId}/documents/10
    + Attributes (Document1)

+ Response 400
    Returned when input does not pass validation.
    + Body

+ Response 500
    Returned when a generic error occours.
    + Body


## Document [/departments/{departmentCode}/documents/{id}]

### Read document [GET]
Returns the document detail for the given id.

+ Parameters
    + departmentCode: `ST000006` (string, required) - id of the entity
    + id: 1 (number, required) - id of the document

+ Response 200
    + Headers
        Content-Type:application/XYZ
    + Body

+ Response 404
    Returned when the required resource cannot be found.
    + Body

+ Response 500
    Returned when a generic error occours.
    + Body

### Delete document [DELETE]
Deletes a document.

+ Parameters
    + departmentCode: `ST000006` (string, required) - id of the entity
    + id: 1 (number, required) - id of the document

+ Response 204
    Returned when the resource is successfully deleted.

    + Body

+ Response 404
    Returned when the required resource cannot be found.

    + Body

+ Response 500
    Returned when a generic error occours.

    + Body


#######################
# Data Structures
#######################

## PaginationDataTree1 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 1 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## PaginationDataTree2 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 2 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## PaginationDataTree3 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 3 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## PaginationDataTree9 (object)
+ paginationData (object, required) - Informations required for pagination
    + count: 9 (number,required) - total number of resources
    + pageNum: 1 (number, required) - slice of resources returned
    + pageSize: 25 (number, required) - size of the slice

## Node1 (object)
+ id: 1 (required, number)
+ parentId: 1 (number)
+ nodeType (NodeType1)
+ code: `BCPROOT` (required, string)
+ description: `BCP` (required, string)

## NodeType1 (object)
+ id: `BC_ROOT` (required, string)
+ description: `BCP` (required, string)

## Node2 (object)
+ id: 2 (required, number)
+ parentId: 1 (required, number)
+ nodeType (NodeType2)
+ code: `CMT00001` (required, string)
+ description: `BC COMMITTEE` (required, string)

## NodeType2 (object)
+ id: `BC_COMM` (required, string)
+ description: `BC_COMMITTEE` (required, string)

## Node2b (object)
+ id: 10 (required, number)
+ parentId (number)
+ nodeTypeId: `COM` (required, string)
+ code: `CMT00002` (required, string)
+ description: `BC COMMITTEE 2` (required, string)

## Node2Detail (Node2)
+ contentDetail (object)
    + Include PaginationDataTree3
    + results (array[RoleProfile1, RoleProfile2, RoleProfile3], required) - array of profiles

## Node3 (object)
+ id: 3 (required, number)
+ parentId: 1 (number)
+ nodeType (NodeType3)
+ code: `BCORG001` (required, string)
+ description: `BC ORGANIZATION` (required, string)

## NodeType3 (object)
+ id: `BC_ORG` (required, string)
+ description: `BC_ORGANIZATION` (required, string)

## Node3b (object)
+ id: 11 (required, number)
+ parentId (number)
+ nodeTypeId: `ORG` (required, string)
+ code: `BCORG002` (required, string)
+ description: `BC ORGANIZATION 2` (required, string)

## Node4 (object)
+ id: 9 (required, number)
+ parentId: 3 (required, number)
+ nodeType (NodeType4)
+ code: `C09.1.01` (required, string)
+ description: `INCIDENT MANAGEMENT` (required, string)

## NodeType4 (object)
+ id: `BC_CRIPROC` (required, string)
+ description: `BC_CRITICAL_PROCESS` (required, string)

## Node4b (object)
+ id: 12 (required, number)
+ parentId (required, number)
+ nodeTypeId: `CRI` (required, string)
+ code: `C09.1.02` (required, string)
+ description: `INCIDENT MANAGEMENT 2` (required, string)

## Node5 (object)
+ id: 10 (required, number)
+ parentId: 3 (required, number)
+ nodeType (NodeType4)
+ code: `C16.1` (required, string)
+ description: `MONITORING & CONTROL` (required, string)

## NodeType6 (object)
+ id: `BC_SITE` (required, string)
+ description: `BC_SITE` (required, string)

## Node6 (object)
+ id: 16 (required, number)
+ parentId: 9 (required, number)
+ nodeType (NodeType6)
+ code: `ST000003` (required, string)
+ description: `VERONA` (required, string)

## Node6b (object)
+ id: 13 (required, number)
+ parentId (required, number)
+ nodeTypeId: `SIT` (required, string)
+ code: `ST000003` (required, string)
+ description: `VERONA` (required, string)

## Node6Detail (Node6)
+ contentDetail (Site1)

## Node7 (object)
+ id: 7 (required, number)
+ parentId: 4 (required, number)
+ nodeType (NodeType6)
+ code: `ST000005` (required, string)
+ description: `MUNCHEN, AM TUCHERPARK 12` (required, string)

## Node8 (object)
+ id: 8 (required, number)
+ parentId: 6 (required, number)
+ nodeType (NodeType8)
+ code: `ET000067` (required, string)
+ description: `EMERGENCY TEAM 67 - INCIDENT MANAGEMENT` (required, string)

## NodeType8 (object)
+ id: `BC_ET` (required, string)
+ description: `EMERGENCY TEAM` (required, string)

## Node8b (object)
+ id: 14 (required, number)
+ parentId (required, number)
+ nodeType (NodeType8)
+ code: `ET000068` (required, string)
+ description: `EMERGENCY TEAM 68 - INCIDENT MANAGEMENT 2` (required, string)

## Node9 (object)
+ id: 9 (required, number)
+ parentId: 2 (number)
+ nodeType (NodeType9)
+ code: `BC_CHAIRMA` (required, string)
+ description: `COMMITTEE CHAIRMAN` (required, string)

## NodeType9 (object)
+ id: `BC_CRIMAN` (required, string)
+ description: `COMMITTEE CRISIS MANAGER` (required, string)

## Node9Detail (Node9)
+ contentDetail (ProfileDetail)

## Node10 (object)
+ id: 6 (required, number)
+ parentId: 2 (required, number)
+ nodeType (NodeType10)
+ code: `BC_CRIMAN` (required, string)
+ description: `COMMITTEE CRISIS MANAGER` (required, string)

## NodeType10 (object)
+ id: `BC_CRIMAN` (required, string)
+ description: `COMMITTEE CRISIS MANAGER` (required, string)

## Node10Detail (Node10)
+ contentDetail (RoleProfile11)

## Node11 (object)
+ id: 3 (required, number)
+ parentId: 1 (required, number)
+ nodeType (NodeType3)
+ code: `BCORG001` (required, string)
+ description: `BC ORGANIZATION` (required, string)

## Node11Detail (Node11)
+ contentDetail (object)
    + code: `BCORG001` (required, string)
    + description: `BC ORGANIZATION` (optional, string)
    + notes: `notes` (optional, string)
    + type: `BC_ORG` (optional, string)
    + structureType (object)
        + id: `BC` (required, string)

## Node12 (object)
+ id: 9 (required, number)
+ parentId: 3 (required, number)
+ nodeType (NodeType4)
+ code: `C09.1.01` (required, string)
+ description: `INCIDENT MANAGEMENT` (required, string)


## Node12Detail (Node12)
+ contentDetail (object)
    + employees (object)
        + Include PaginationDataTree2
        + results (array[RoleProfile12, RoleProfile13], required) - array of profiles
    + notes: `notes` (optional, string)
    + code: `C09.1.01` (string)
    + description: `INCIDENT MANAGEMENT` (string)


## Profile1 (ProfileDetail)
+ id: 1 (number) - id of the profile
+ nodeTypeDescription: `CHA`

## RoleProfile1 (ProfileListResult2)
+ id: 100 (number) - id of the profile
+ nodeId: 7 (number, required) - node id
+ employeeRole (EmployeeRole3)

## RoleProfile2 (ProfileListResult2)
+ id: 101 (number) - id of the profile
+ nodeId: 2 (number, required) - node id
+ employeeRole (EmployeeRole4)

## RoleProfile3 (ProfileListResult2)
+ id: 103 (number) - id of the profile
+ nodeId: 6 (number, required) - node id
+ employeeRole (EmployeeRole2)

## RoleProfile4 (ProfileListResult)
+ id: 4 (number) - id of the profile
+ nodeTypeDescription: `SM`

## RoleProfile5 (ProfileListResult)
+ id: 5 (number) - id of the profile
+ nodeTypeDescription: `UM`

## RoleProfile6 (ProfileListResult)
+ id: 6 (number) - id of the profile
+ nodeTypeDescription: `CM`

## RoleProfile7 (ProfileListResult)
+ id: 7 (number) - id of the profile
+ nodeTypeDescription: `TL`

## RoleProfile8 (ProfileListResult)
+ id: 8 (number) - id of the profile
+ nodeTypeDescription: `TM`

## RoleProfile9 (ProfileListResult)
+ id: 9 (number) - id of the profile
+ nodeTypeDescription: `TM`

## RoleProfile10 (object)
+ nodeParent: 16 (number) - parent's node id
+ nodeId: 7 (number, required) - node id
+ employeeRole (EmployeeRole1)
+ Include ProfileBase
+ jobRole: `job` (string)
+ managerRole: `true` (boolean)
+ businessUnit: `BU` (string)
+ Include ProfilesAddressesBase
+ id: 1 (number) - id of the profile

## RoleProfile11 (object)
+ nodeParent: 2 (number) - parent's node id
+ nodeId: 6 (number, required) - node id
+ employeeRole (EmployeeRole2)
+ Include ProfileBase
+ jobRole: `job` (string)
+ managerRole: `true` (boolean)
+ businessUnit: `BU` (string)
+ Include ProfilesAddressesBase
+ id: 101 (number) - id of the profile

## RoleProfile12 (object)
+ nodeParent: 9 (number) - parent's node id
+ nodeId: 15 (number, required) - node id
+ employeeRole (EmployeeRole5)
+ Include ProfileBase
+ firstName: `PAOLO` (required, string)
+ lastName: `ROSSI` (required, string)
+ jobRole: `job` (string)
+ managerRole: `true` (boolean)
+ businessUnit: `BU` (string)
+ Include ProfilesAddressesBase
+ id: 201 (number) - id of the profile

## RoleProfile13 (object)
+ nodeParent: 9 (number) - parent's node id
+ nodeId: 14 (number, required) - node id
+ employeeRole (EmployeeRole6)
+ Include ProfileBase
+ jobRole: `job` (string)
+ managerRole: `true` (boolean)
+ businessUnit: `BU` (string)
+ Include ProfilesAddressesBase
+ id: 200 (number) - id of the profile

## EmployeeRole1 (object)
+ id: `BC_SITEMAN` (required, string)
+ description: `SITE MANAGER` (required, string)

## EmployeeRole2 (object)
+ id: `BC_CRIMAN` (required, string)
+ description: `COMMITTEE CRISIS MANAGER` (required, string)

## EmployeeRole3 (object)
+ id: `BC_CHAIRMA` (required, string)
+ description: `COMMITTEE CHAIRMAN` (required, string)

## EmployeeRole4 (object)
+ id: `BC_MANAGER` (required, string)
+ description: `BC MANAGER` (required, string)

## EmployeeRole5 (object)
+ id: `BC_UNITMAN` (required, string)
+ description: `SERVICE MANAGER` (required, string)

## EmployeeRole6 (object)
+ id: `BC_SERVMAN` (required, string)
+ description: `SERVICE MANAGER` (required, string)

## ProfileListResult2 (ProfileBase)
+ nodeParent: 2 (number) - parent's node id
+ nodeId: 6 (number, required) - node id
+ employeeRole (EmployeeRole2)
+ jobRole: `job` (string)
+ managerRole: `true` (boolean)
+ businessUnit: `BU` (string)
+ Include ProfilesAddressesBase
+ id: 101 (number) - id of the profile

## ProfileBase (object)
+ firstName: `MARIO` (required, string) - First name of the profile. Must be between 2 and 50 chars long.
+ lastName: `BIANCHI` (required, string) - Last name of the profile. Must be between 2 and 50 chars long.
+ email: `mbianchi@acme.it` (required, string) - Email of the profile. Must be a valid email, as specified in RFC2822.
+ profession: `Senior Developer` (string)
+ altInternetAddress: `firstname.lastname@organization2.com` (string) - Must be a valid email, as specified in RFC2822.
+ notesAddress: `indirizzo_notes@aaaaa.it` (string) - Must be a valid email, as specified in RFC2822.
+ userId: `userid` (string) - Username of the profile. If present this field must match with the field used to authenticate on the application server.
+ personalCode: `X123456` (required, string)
+ phone (object)
    + country: `39` (string)
    + number: `12345678` (string)
+ mobilePhone (object)
    + country: `39` (string)
    + number: `1234567` (string)
+ fax (object)
    + country: `39` (string)
    + number: `3904912345678` (string)

## ProfileListResult (ProfileBase)
+ id: 1 (number)
+ Include ProfilesAddresses

## ProfileDetail (ProfileBase)
+ businessUnit: `not used?` (string)
+ jobResponsability: `job responsability` (string)
+ employeeType: `MAI` (required, string) - Code of profile type
+ bluePageCode: `L123456` (required, string)
+ hiringDate: `2016-02-28` (required, string) - Hiring date of the profile. The profile can be found through queries only starting from the specified date.
+ managerRole: `true` (boolean)
+ id: 1 (number)
+ Include ProfilesAddresses

## ProfilesAddressesBase (object)
+ addresses
    + preferred (ProfileAddressBase) - preferred address of the user, if different from business address.
    + business (ProfileAddressBase) - business address of the user.

## ProfilesAddresses (object)
+ addresses
    + preferred (ProfileAddress) - preferred address of the user, if different from business address.
    + business (ProfileAddress) - business address of the user.

## ProfileAddressBase
+ street: Via Nizza 15
+ city: Torino
+ country: Italy
+ zip: 12345

## ProfileAddress
+ street: Via Nizza 15
+ city: Torino
+ country: Italy
+ zip: 12345
+ locationId: 1 (number)

## Site1 (object)
+ telephone: `012345678` (string)
+ location (Location1)
+ employees (object)
    + Include PaginationDataTree1
    + results (array[RoleProfile10], required) - array of profiles
+ code: `ST000003` (string)
+ description: `VERONA` (string)

## Location1
+ id: 2 (required, number)
+ street: Via Mazzini (string)
+ zip: 37121 (string, optional)
+ city: VERONA (string, optional)
+ state: VR (string, optional)
+ country: Italy (string, optional)

## Document1 (object)
+ id: 1 (number, required) - document id
+ code: `C16.10.01` (string, required) - department code
+ fileName: `document1.xlsx` (string, required)
+ uploaddate: `2016-05-18T11:51:15` (string, required)

## Document2 (object)
+ id: 2 (number, required) - document id
+ code: `C16.10.01` (string, required) - department code
+ fileName: `document2.docx` (string, required)
+ uploaddate: `2016-05-18T12:13:42` (string, required)

## Document3 (object)
+ id: 3 (number, required) - document id
+ code: `ST000003` (string, required) - department code
+ fileName: `anotherdocument.pptx` (string, required)
+ uploaddate: `2016-05-17T16:15:26` (string, required)
